#!/bin/bash
# HW1 - matrices
# ID: 933293709 Jui-Hung Lu

#1.read and put data into matrix that I declare
#2.count the row and col
dims() {
        declare -A matrix
        a=0
        b=0
        while read m1
        do
                a=0
                for i in $m1
                do
                        matrix[$a,$b]=$i
                        a=$((a+1))
                done
                b=$((b+1))
        done < $1
	echo $b $a
}

#1.read and put data into matrix that I declare
#2.echo col first then row+1 and echo col again  
transpose() {
	declare -A matrix
	a=0
	b=0
	while read m1
	do
		a=0
		for i in $m1
		do
			matrix[$a,$b]=$i
			a=$((a+1))
		done
		b=$((b+1))
	done < $1
	for ((i=0;i<a;i++))
	do
		for ((j=0;j<b;j++))
		do
			echo  -n -e "${matrix[$i,$j]}"
			if test $j = $(expr $b - 1)
        		then
                		echo -n ""
        		else
                		echo -e -n "\t"
			fi
		done
		if test $i = $a
		then
			echo -n ""
		else
			echo
		fi
	done
}

#1.read and put data into matrix that I declare
#2.add all the numbers which in the same col
#3.count rounds up or rounds down, I multiply 10 first, and then check the remainder after divide it by 10
mean() {
	declare -A matrix
	a=0
	b=0
	while read myfile
	do
        	b=0
        	for i in $myfile
        	do
                	matrix[$a,$b]=$i
                	((b++))
        	done
        	((a++))
	done < $1
	for ((j=0;j<b;j++))
	do
        	c=0
        	for((k=0;k<a;k++))
        	do
                	m=${matrix[$k,$j]}
                	c=$(expr $c + $m)
        	done
        	x=$(($c*10))
        	y=$(($x/$a))
        	z=$(($y%10))
		if test $z -gt 4
        	then
                	z=$(($y/10))
                	echo -n -e "$(expr $z + 1)"
        	elif test $z -lt -4
        	then
                	z=$(($y/10))
                	echo -n -e "$(expr $z - 1)"
        	else
                	echo -n -e "$(($y/10))"
        	fi
        	if test $j = $(expr $b - 1)
        	then
        	        echo 
        	else
        	        echo -e -n "\t"
        	fi
	done
}
#1.read and put data into matrix that I declare
#2.check the two matrixs is compatible or not
#3.add and echo
add() {
declare -A matrix1
declare -A matrix2
a=0
b=0
while read myfile1
do
	b=0
	for i in $myfile1
	do
		matrix1[$a,$b]=$i
		((b++))
	done
	((a++))
done < $1
x=0
y=0
while read myfile
do
        y=0
        for i in $myfile
        do
                matrix2[$x,$y]=$i
                ((y++))
        done
        ((x++))
done < $2
if test $x = $a && test $y = $b
then 
i=0
j=0
while read myfile2
do
	j=0
	for x in $myfile2
	do
		c=${matrix1[$i,$j]}
		echo -e -n "$(expr $c + $x)"
		if test $j = $(expr $b - 1)
                then
                	echo -n ""
                else
                	echo -e -n "\t"
                fi	
		((j++))
	done
	echo
	((i++))
done < $2
else
	echo "this two inout are imcompatible" 1>&2
        exit 1
fi
}
#1.read and put data into matrix that I declare
#2.check the two matrixs is compatible or not
#3.multiply and echo
multiply() {
declare -A matrix1
declare -A matrix2
a1=0
b1=0
while read myfile1
do
        b1=0
        for i in $myfile1
        do
                matrix1[$a1,$b1]=$i
                ((b1++))
        done
        ((a1++))
done < $1
a2=0
b2=0
while read myfile2
do
        b2=0
        for i in $myfile2
        do
                matrix2[$a2,$b2]=$i
                ((b2++))
        done
        ((a2++))
done < $2
if test $b1 = $a2
then
	for ((i=0;i<a1;i++))
	do
		for ((j=0;j<b2;j++))
		do
			c=0
			for((k=0;k<a2;k++))
			do
				m1=${matrix1[$i,$k]}
				m2=${matrix2[$k,$j]}
				d=$(expr $m1 \* $m2)  
				c=$(expr $c + $d)
			done 
			echo -e -n "$c"
			if test $j = $(expr $b2 - 1)
                	then
                        	echo -n ""
                	else
                        	echo -e -n "\t"
			fi
		done
		echo
	done
else
	echo "this two matrix can not multiply" 1>&2
        exit 1
fi
}
#1.read the arg $1 to check the function name, if did not found, echo to stderr
#2.check the numbers of arg is appropriate or not, if not, echo to stderr
#3.check the arg is readable or not, if not, echo to stderr
#4.call the function and send the arg to the function
funt=$1
if test "$funt" == "dims" || test "$funt" == "transpose" || test "$funt" == "mean"
then 
	mtstdin="${2:-/dev/stdin}"
	if test $3
	then
		echo "wrong OPERATION or input" 1>&2
        	exit 1
	elif ! [ -r $2 ]
	then
                echo "unreadable input" 1>&2
                exit 1
	else
		$funt $mtstdin
	fi
elif test "$funt" == "add" || test "$funt" == "multiply"
then
	if (($# == 1)) || test "$4"
	then
		echo "wrong input" 1>&2
		exit 1
	elif ! [ -r $2 ] || ! [ -r $3 ]
	then
		echo "readable input" 1>&2
		exit 1
	else
		$funt $2 $3
	fi
else
	echo "wrong OPERATION or input" 1>&2
	exit 1
fi
